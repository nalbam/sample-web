#!groovy

echo "APPLICATION  ${env.APPLICATION_NAME}"
echo "JOB_NAME     ${env.JOB_NAME}"
echo "BUILD_NUMBER ${env.BUILD_NUMBER}"
echo "GIT_URL      ${env.SOURCE_REPOSITORY_URL}"
echo "GIT_REF      ${env.SOURCE_REPOSITORY_REF}"
echo "GIT_SECRET   ${env.SOURCE_REPOSITORY_SECRET}"
echo "JENKINS_URL  ${env.JENKINS_URL}"
echo "SLACK_URL    ${env.SLACK_WEBHOOK_URL}"

node() {
  String app = "${env.APPLICATION_NAME}"
  String ver = "1.0.${env.BUILD_NUMBER}"

  //String git_url = "${env.SOURCE_REPOSITORY_URL}"
  //String git_ref = "${env.SOURCE_REPOSITORY_REF}"

  String jenkins = "${env.JENKINS_URL}/blue/organizations/jenkins"
  String job = "${env.JOB_NAME}".replaceAll(/\//, '%2F')
  String url = "${jenkins}/${job}/detail/ops-${env.APPLICATION_NAME}-pipeline/${env.BUILD_NUMBER}/pipeline/"
  echo "Pipeline: ${url}"

  stage('Build Image') {
    openshiftBuild(namespace: 'ops', buildConfig: app, showBuildLogs: 'true')
    notify("good", "Build Success: ${env.APPLICATION_NAME} <${url}|#${env.BUILD_NUMBER}>")
  }
  stage('Deploy DEV') {
    openshiftTag(namespace: 'ops', sourceStream: app, sourceTag: 'latest', destinationNamespace: 'dev', destinationStream: app, destinationTag: ver)
    openshiftDeploy(namespace: 'dev', deploymentConfig: app)
    openshiftScale(namespace: 'dev', deploymentConfig: app, replicaCount: '1')
  }
  stage('Proceed QA') {
    notify("#439FE0", "Proceed QA?: ${env.APPLICATION_NAME} <${url}|#${env.BUILD_NUMBER}>")
    timeout(time: 15, unit: 'MINUTES') {
      input(message: 'Proceed QA?')
    }
  }
  stage('Deploy QA') {
    openshiftTag(namespace: 'ops', sourceStream: app, sourceTag: 'latest', destinationNamespace: 'qa', destinationStream: app, destinationTag: ver)
    openshiftDeploy(namespace: 'qa', deploymentConfig: app)
    openshiftScale(namespace: 'qa', deploymentConfig: app, replicaCount: '1')
  }
}

def notify(color, message) {
  try {
    if (env.SLACK_WEBHOOK_URL) {
      sh "curl -s http://toast.sh/helper/slack.sh | bash -s -- -u=${env.SLACK_WEBHOOK_URL} --color=${color} '${message}'"
    }
  } catch (ignored) {
  }
}
